/**
 * This class is generated by jOOQ
 */
package generated.tables;


import generated.Keys;
import generated.Tripreservation;
import generated.tables.records.BookingRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Booking extends TableImpl<BookingRecord> {

	private static final long serialVersionUID = -655004662;

	/**
	 * The reference instance of <code>tripreservation.booking</code>
	 */
	public static final Booking BOOKING = new Booking();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<BookingRecord> getRecordType() {
		return BookingRecord.class;
	}

	/**
	 * The column <code>tripreservation.booking.id</code>.
	 */
	public final TableField<BookingRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>tripreservation.booking.customerCode</code>.
	 */
	public final TableField<BookingRecord, UInteger> CUSTOMERCODE = createField("customerCode", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>tripreservation.booking.date</code>.
	 */
	public final TableField<BookingRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

	/**
	 * Create a <code>tripreservation.booking</code> table reference
	 */
	public Booking() {
		this("booking", null);
	}

	/**
	 * Create an aliased <code>tripreservation.booking</code> table reference
	 */
	public Booking(String alias) {
		this(alias, BOOKING);
	}

	private Booking(String alias, Table<BookingRecord> aliased) {
		this(alias, aliased, null);
	}

	private Booking(String alias, Table<BookingRecord> aliased, Field<?>[] parameters) {
		super(alias, Tripreservation.TRIPRESERVATION, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<BookingRecord, UInteger> getIdentity() {
		return Keys.IDENTITY_BOOKING;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<BookingRecord> getPrimaryKey() {
		return Keys.KEY_BOOKING_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<BookingRecord>> getKeys() {
		return Arrays.<UniqueKey<BookingRecord>>asList(Keys.KEY_BOOKING_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Booking as(String alias) {
		return new Booking(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Booking rename(String name) {
		return new Booking(name, null);
	}
}
